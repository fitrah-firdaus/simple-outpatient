/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.simple.clinic.outpatient.view.registration;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.function.Consumer;
import javax.swing.JOptionPane;
import javax.swing.JViewport;
import org.simple.clinic.outpatient.model.Patient;
import org.simple.clinic.outpatient.service.RegistrationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 *
 * @author fef339
 */
@Component
public class RegistrationPanel extends javax.swing.JPanel {

    private static final Logger logger = LoggerFactory.
            getLogger(RegistrationPanel.class);
    private final RegistrationService registrationService;

    private RegistrationDataPanel registrationDataPanel;

    public void setRegistrationDataPanel(RegistrationDataPanel registrationDataPanel) {
        this.registrationDataPanel = registrationDataPanel;
    }

    /**
     * Creates new form RegistrationPanel
     *
     * @param registrationService
     */
    public RegistrationPanel(RegistrationService registrationService) {
        initComponents();
        this.registrationService = registrationService;
        patientIdLbl.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patientNameLbl = new javax.swing.JLabel();
        nameFld = new javax.swing.JTextField();
        birthDateLbl = new javax.swing.JLabel();
        birthDatePicker = new com.github.lgooddatepicker.components.DatePicker();
        addressLbl = new javax.swing.JLabel();
        addressScrollPane = new javax.swing.JScrollPane();
        addressTxt = new javax.swing.JTextArea();
        registerBtn = new javax.swing.JButton();
        patientIdLbl = new javax.swing.JLabel();

        patientNameLbl.setText("Name");

        birthDateLbl.setText("Birth Date");

        addressLbl.setText("Address");

        addressTxt.setColumns(20);
        addressTxt.setRows(5);
        addressScrollPane.setViewportView(addressTxt);

        registerBtn.setText("Register");
        registerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patientNameLbl)
                    .addComponent(birthDateLbl)
                    .addComponent(addressLbl))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registerBtn)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(birthDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameFld)
                            .addComponent(addressScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                        .addGap(139, 139, 139)
                        .addComponent(patientIdLbl)))
                .addContainerGap(374, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientNameLbl)
                    .addComponent(nameFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientIdLbl))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(birthDateLbl)
                    .addComponent(birthDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addressLbl)
                    .addComponent(addressScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(registerBtn)
                .addContainerGap(518, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadRegistrationDataPanel() {
        logger.info(this.getParent().
                toString());
        JViewport viewport = (JViewport) this.
                getParent();
        viewport.removeAll();
        viewport.setView(
                registrationDataPanel);
    }

    public void clearData() {
        patientIdLbl.setText("");
        nameFld.setText("");
        birthDatePicker.setText("");
        addressTxt.setText("");
    }

    private void setData(Patient patient) {
        logger.info(patient.toString());
        patientIdLbl.setText(patient.getPatientId().toString());
        nameFld.setText(patient.getPatientName());
        birthDatePicker.setDate(LocalDate.parse(
                patient.getBirthDate().toString()));
        addressTxt.setText(patient.getAddress());
    }

    public void loadDataById(int id) {
        registrationService.
                findPatientById(id).
                ifPresentOrElse((Patient 
                        patient) -> {
            logger.info("SET DATA");
            setData(patient);
        }, () -> {
            logger.info("CLEAR DATA");
            clearData();
        });
    }

    private void registerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtnActionPerformed
        String patientName = nameFld.getText();
        Date birthDate = Date.from(
                birthDatePicker
                        .getDate()
                        .atStartOfDay()
                .atZone(ZoneId
                        .systemDefault())
                        .toInstant());
        String address = addressTxt.getText();

        try {
            Patient patient;
            if (patientIdLbl.getText().isEmpty()) {
                patient = registrationService
                        .savePatient(patientName,
                        birthDate, address);
            } else {
                patient = new Patient();
                patient.setPatientId(
                        Integer.valueOf(
                        patientIdLbl.getText()));
                registrationService.updatePatient(
                        Integer.parseInt(
                        patientIdLbl.getText()),
                        patientName, 
                        birthDate, address);
            }

            logger.info(patient.toString());
            if (patient.getPatientId() != null) {
                JOptionPane.showMessageDialog(
                        this,
                        "Patient Updated with ID " + 
                                patient.getPatientId());
                registrationDataPanel.loadData();
                loadRegistrationDataPanel();
            } else {
                JOptionPane.showMessageDialog(
                        this,
                        "Patient Created "
                                + "Failed",
                        "Error", 
                        JOptionPane.
                                ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            logger.error("", ex);
            JOptionPane.showMessageDialog(
                    this, 
                    ex.getMessage(),
                    "Error", 
                    JOptionPane.
                            ERROR_MESSAGE);
        }

    }//GEN-LAST:event_registerBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressLbl;
    private javax.swing.JScrollPane addressScrollPane;
    private javax.swing.JTextArea addressTxt;
    private javax.swing.JLabel birthDateLbl;
    private com.github.lgooddatepicker.components.DatePicker birthDatePicker;
    private javax.swing.JTextField nameFld;
    private javax.swing.JLabel patientIdLbl;
    private javax.swing.JLabel patientNameLbl;
    private javax.swing.JButton registerBtn;
    // End of variables declaration//GEN-END:variables
}
